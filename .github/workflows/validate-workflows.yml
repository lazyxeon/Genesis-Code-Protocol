---
name: Validate Workflows

on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Validate workflow dependencies
      - name: Validate workflow dependencies
        run: |
          echo "Validating workflow dependencies..."

          # Check for required files
          if [ ! -f ".github/workflows/update-toc-file.yml" ]; then
            echo "Error: Missing workflow file: .github/workflows/update-toc-file.yml"
            exit 1
          fi

          if [ ! -f ".github/workflows/update-repo-structure.yml" ]; then
            echo "Error: Missing workflow file: .github/workflows/update-repo-structure.yml"
            exit 1
          fi

          echo "✓ All required workflow files found"

      # Test TOC generation
      - name: Test TOC generation
        run: |
          echo "Testing TOC generation script..."

          # Check if script exists
          if [ -f "scripts/generate_repo_toc.py" ]; then
            # Create a test directory if needed
            mkdir -p test_output

            # Run the script with dry-run mode if available
            if grep -q "dry_run" scripts/generate_repo_toc.py; then
              python scripts/generate_repo_toc.py --dry-run --output test_output/test_toc.md || true
            else
              # Just check if the script is valid Python
              python -m py_compile scripts/generate_repo_toc.py
            fi

            echo "✓ TOC generation script validated"
          else
            echo "Warning: TOC generation script not found, skipping test"
          fi

      # Test repo structure update
      - name: Test repo structure update
        run: |
          echo "Testing repo structure update script..."

          # Check if script exists
          if [ -f "scripts/update_repo_structure.py" ]; then
            # Create a test directory if needed
            mkdir -p test_output

            # Run the script with dry-run mode if available
            if grep -q "dry_run" scripts/update_repo_structure.py; then
              python scripts/update_repo_structure.py --dry-run --output test_output/test_structure.md || true
            else
              # Just check if the script is valid Python
              python -m py_compile scripts/update_repo_structure.py
            fi

            echo "✓ Repo structure update script validated"
          else
            echo "Warning: Repo structure update script not found, skipping test"
          fi

      # Test markdown spacing fix
      - name: Test markdown spacing fix
        run: |
          echo "Testing markdown spacing fix script..."

          # Check if script exists
          if [ -f "scripts/fix_md_spacing.py" ]; then
            # Create a test file
            echo "# Test heading" > test_output/test_spacing.md
            echo "Test content" >> test_output/test_spacing.md

            # Run the script on the test file
            python scripts/fix_md_spacing.py test_output/test_spacing.md || true

            echo "✓ Markdown spacing fix script validated"
          else
            echo "Warning: Markdown spacing fix script not found, skipping test"
          fi

      # Test markdown linting
      - name: Test markdown linting
        run: |
          echo "Testing markdown linting..."

          # Install markdownlint-cli2
          npm install -g markdownlint-cli2

          # Create a test markdown file with known good formatting
          cat > test_output/test_lint.md << EOF
          # Test Heading

          This is a test paragraph.

          ## Second Level Heading

          - List item 1
          - List item 2

          ### Third Level Heading

          This is another paragraph.
          EOF

          # Run markdownlint on the test file
          markdownlint-cli2 --config .markdownlint.yml \
            "test_output/test_lint.md"

          echo "✓ Markdown linting successful"

      # Validate YAML workflows
      - name: Validate YAML workflows
        run: |
          echo "Validating YAML workflows..."

          # Install yamllint
          pip install yamllint

          # Create a temporary yamllint config
          cat > .yamllint << EOF
          extends: default

          rules:
            line-length: disable
            document-start: disable
            truthy: disable
          EOF

          # Run yamllint on workflow files
          yamllint -c .yamllint .github/workflows/ || true

          # Basic YAML validation
          for file in .github/workflows/*.yml; do
            echo "Validating $file..."
            python -c "import yaml; yaml.safe_load(open('$file'))"
          done

          echo "✓ YAML workflows validated"
