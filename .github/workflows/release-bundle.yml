name: Release Bundle

# Run this workflow when a new release is created
on:
  release:
    types: [published]
  workflow_dispatch:

# Default permissions for all jobs
permissions:
  contents: read

jobs:
  bundle:
    runs-on: ubuntu-latest
    # This job needs write access to upload the bundle and SBOMs
    permissions:
      contents: write
      id-token: write  # For SLSA provenance generation
    # Expose the tag name for both release and manual runs
    env:
      TAG: ${{ github.event.release.tag_name || github.ref_name }}
      RELEASE_TAG: ${{ github.ref_name }}
    outputs:
      release-tag: ${{ steps.setup.outputs.release-tag }}
      artifacts-ready: ${{ steps.upload.outputs.artifacts-ready }}
    steps:
      # Checkout the repository at a known commit
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.TAG }}
          fetch-depth: 0  # Full history for proper provenance

      # Install cosign for signing capabilities
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.5.3'
          
      # Set up release information
      - name: Setup release info
        id: setup
        run: |
          set -euo pipefail
          echo "release-tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "Setting up release for tag: $RELEASE_TAG"


      # Generate comprehensive exit bundle using the new script
      - name: Generate Exit Bundle
        run: |
          set -euo pipefail
          echo "Creating comprehensive exit bundle for tag: $RELEASE_TAG"
          # Run the exit wizard bundle generation script
          ./scripts/make_exit_bundle.sh
          
          # The script creates a file with sanitized name, find it
          BUNDLE_FILE=$(ls lyra-exit-bundle-*.zip | head -1)
          echo "Bundle file: $BUNDLE_FILE"
          
          # Verify bundle was created
          if [ ! -f "$BUNDLE_FILE" ]; then
            echo "Error: Bundle not created"
            exit 1
          fi
          
          echo "Bundle created successfully:"
          ls -la lyra-exit-bundle-*.zip
          ls -la dist/checksums/ || true

      # Generate SPDX SBOM for the bundled artifact (backup)
      - name: SBOM (SPDX Backup)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: dist/sbom-backup.spdx.json

      # Generate CycloneDX SBOM for the bundled artifact (backup)
      - name: SBOM (CycloneDX Backup)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: cyclonedx-json
          output-file: dist/sbom-backup.cdx.json

      # Create a comprehensive SHA-256 checksum file for all artifacts
      - name: SHA-256 checksums
        run: |
          set -euo pipefail
          echo "Creating comprehensive checksums..."
          mkdir -p dist/checksums
          
          # Create checksums for all bundle-related files
          sha256sum lyra-exit-bundle-*.zip > dist/checksums/BUNDLE_SHA256SUMS.txt
          if [ -f "dist/sbom-backup.spdx.json" ]; then
            sha256sum dist/sbom-backup.spdx.json >> dist/checksums/BUNDLE_SHA256SUMS.txt
          fi
          if [ -f "dist/sbom-backup.cdx.json" ]; then
            sha256sum dist/sbom-backup.cdx.json >> dist/checksums/BUNDLE_SHA256SUMS.txt
          fi
          
          echo "Final checksums:"
          cat dist/checksums/BUNDLE_SHA256SUMS.txt

      # Upload the comprehensive bundle and related files to the GitHub release
      - name: Upload bundle to release
        id: upload
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            lyra-exit-bundle-*.zip
            dist/sbom-backup.spdx.json
            dist/sbom-backup.cdx.json
            dist/checksums/BUNDLE_SHA256SUMS.txt

      # Signal that artifacts are ready for signing
      - name: Signal artifacts ready
        id: ready
        run: |
          set -euo pipefail
          echo "artifacts-ready=true" >> "$GITHUB_OUTPUT"
          echo "Release artifacts are ready for signing"

