name: Update Top-Level TOC file

on:
  push:
    branches:
      - main
    paths-ignore:
      - "Table Of Contents.md"
      - ".github/workflows/update-toc-file.yml"
  schedule:
    - cron: "21 3 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: toc-file
  cancel-in-progress: true

jobs:
  build-toc:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: chore/update-top-level-toc
      PR_TITLE: "chore(docs): refresh Table Of Contents.md"
    steps:
      - name: Checkout repository (main)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Validate scripts exist
        run: |
          set -e
          for f in scripts/generate_repo_toc.py scripts/fix_md_spacing.py; do
            if [ ! -f "$f" ]; then
              echo "Error: $f not found"
              exit 1
            fi
          done
          echo "✓ All required scripts found"

      - name: Generate Table Of Contents.md
        run: |
          set -e
          echo "Generating Table Of Contents..."
          python scripts/generate_repo_toc.py

          if [ ! -f "Table Of Contents.md" ]; then
            echo "Error: Table Of Contents.md was not generated"
            exit 1
          fi

          echo "Fixing markdown spacing..."
          # Run formatter (single correct path)
          python scripts/fix_md_spacing.py "Table Of Contents.md"

          echo "✓ Table Of Contents.md generated and formatted successfully"

      - name: Check for changes
        id: changes
        run: |
          set -e
          git add "Table Of Contents.md"
          if git diff --cached --quiet; then
            echo "No changes detected in Table Of Contents.md"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected in Table Of Contents.md"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Show diff
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          echo "Git status:"
            git status
          echo "Changes in Table Of Contents.md:"
          git --no-pager diff --cached -- "Table Of Contents.md"

      - name: Create or Update Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Ensure we are up-to-date with main
          git fetch origin main
          git checkout main
          git pull --ff-only origin main

          # Prepare branch
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "Remote branch $BRANCH_NAME exists - fetching and checking out"
            git fetch origin "$BRANCH_NAME":"$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git rebase main || (echo "Rebase failed, aborting & resetting to main"; git rebase --abort; git checkout main; git branch -D "$BRANCH_NAME"; git checkout -b "$BRANCH_NAME")
          else
            git checkout -b "$BRANCH_NAME"
          fi

          # Re-add file (in case of branch switch)
          git add "Table Of Contents.md"

          if git diff --cached --quiet; then
            echo "No staged changes after branch switch; exiting."
            exit 0
          fi

          git commit -m "docs: auto-update Table Of Contents.md"
          git push -u origin "$BRANCH_NAME"

          # Check for existing PR
          existing_pr_number=$(gh pr list --head "$BRANCH_NAME" --base main --json number --jq '.[0].number')

          if [ -n "${existing_pr_number}" ]; then
            echo "PR #${existing_pr_number} already exists - adding comment & labels."
            gh pr comment "$existing_pr_number" --body "Automated update pushed: \`${GITHUB_SHA}\`"
            gh pr edit "$existing_pr_number" --add-label "documentation" --add-label "automated"
            echo "pr_number=$existing_pr_number" >> "$GITHUB_OUTPUT"
          else
            echo "Creating new PR..."
            body_file=$(mktemp)
            cat > "$body_file" <<'EOF'
## Automated Table Of Contents Update

This PR contains an automated update to the repository Table Of Contents.

### Changes
- Updated `Table Of Contents.md` with current repository structure
- Applied markdown spacing normalization

### Triggered by
- Workflow: ${{ github.workflow }}
- Event: ${{ github.event_name }}
- Commit: ${{ github.sha }}
EOF
            gh pr create \
              --base main \
              --head "$BRANCH_NAME" \
              --title "$PR_TITLE" \
              --body-file "$body_file" \
              --label "documentation" \
              --label "automated"
          fi

      - name: Log result
        run: |
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "✓ Pull request created or updated for Table Of Contents update"
          else
            echo "✓ No changes needed - Table Of Contents is up to date"
          fi
