name: Update Top-Level TOC file

on:
  push:
    branches:
      - main
    paths-ignore:
      - "Table Of Contents.md"
      - ".github/workflows/update-toc-file.yml"
  schedule:
    - cron: "21 3 * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: toc-file
  cancel-in-progress: true

jobs:
  build-toc:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: chore/update-top-level-toc
      PR_TITLE: "chore(docs): refresh Table Of Contents.md"
      TOC_FILE: "Table Of Contents.md"

    steps:
      - name: Checkout repository (main)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Validate scripts exist
        run: |
          set -euo pipefail
          for f in scripts/generate_repo_toc.py scripts/fix_md_spacing.py; do
            if [ ! -f "$f" ]; then
              echo "Error: $f not found"
              exit 1
            fi
          done
          echo "✓ All required scripts found"

      - name: Generate Table Of Contents
        run: |
          set -euo pipefail
          echo "Generating $TOC_FILE..."
          python scripts/generate_repo_toc.py
          if [ ! -f "$TOC_FILE" ]; then
            echo "Error: $TOC_FILE was not generated"
            exit 1
          fi
          echo "Formatting $TOC_FILE..."
          python scripts/fix_md_spacing.py "$TOC_FILE"
          echo "✓ $TOC_FILE generated and formatted successfully"

      - name: Detect changes
        id: changes
        run: |
          set -euo pipefail
          if git diff --quiet -- "$TOC_FILE"; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No changes detected in $TOC_FILE"
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Changes detected in $TOC_FILE"
          fi

      - name: Show diff
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          set -euo pipefail
          echo "Git diff for $TOC_FILE:"
          git --no-pager diff -- "$TOC_FILE"

      - name: Commit & push branch
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          set -euo pipefail
          git switch -C "$BRANCH_NAME"
          git add "$TOC_FILE"
          if git diff --cached --quiet; then
            echo "No staged changes after branch switch; exiting."
            exit 0
          fi
          git commit -m "docs: auto-update Table Of Contents.md"
          git push -f origin "$BRANCH_NAME"

      - name: Create or Update Pull Request
        run: |
          existing_pr_number="$(gh pr list --state open --head "${owner}:${BRANCH_NAME}" --json number --jq '.[0].number // empty' || true)"
          if [ -n "$existing_pr_number" ]; then
          echo "PR #$existing_pr_number already exists - updating."
          gh pr comment "$existing_pr_number" --body "Automated update pushed: \`${GITHUB_SHA}\`" || \
           echo "::warning title=PR Comment Failed::Could not add comment to PR #$existing_pr_number"
          gh pr edit "$existing_pr_number" --add-label "documentation" --add-label "automated" || true
          echo "pr_number=$existing_pr_number" >> "$GITHUB_OUTPUT"
          else
           echo "Creating new PR..."
           printf '%s\n' "$PR_BODY" > pr_body.md
           if ! gh pr create \
          --base main \
          --head "$BRANCH_NAME" \
          --title "$PR_TITLE" \
          --body-file pr_body.md \
          --label "documentation" \
          --label "automated"; then
          echo "::error title=PR Creation Failed::gh pr create command failed"
          exit 1
          fi
          fi
          exit 0
            ## Automated Table Of Contents Update

            This PR contains an automated update to the repository Table Of Contents.

            ### Changes
            - Updated `Table Of Contents.md` with current repository structure
            - Applied markdown spacing normalization

            ### Triggered by
            - Workflow: ${{ github.workflow }}
            - Event: ${{ github.event_name }}
            - Commit: ${{ github.sha }}
        run: |
          # NOTE: We intentionally do NOT use 'set -u' so an unset variable (e.g. intermittent PR number) won't abort.
          set -eo pipefail

          owner="${REPO%%/*}"

          # Small helper for retries (handles eventual consistency or transient gh failures)
          retry() {
            local attempts="$1"; shift
            local delay=2
            local n=1
            while true; do
              if "$@"; then
                return 0
              fi
              if [ "$n" -ge "$attempts" ]; then
                echo "Command failed after $attempts attempts: $*" >&2
                return 1
              fi
              echo "Retry $n/$attempts failed; sleeping $delay s..." >&2
              sleep "$delay"
              n=$((n+1))
              delay=$((delay*2))
            done
          }

            # Ensure labels exist (ignore errors if they already do)
          gh label create documentation --color FFFFFF --description "Documentation updates" 2>/dev/null || true
          gh label create automated --color 000000 --description "Automated change" 2>/dev/null || true

          existing_pr_number="$(gh pr list --state open --head "${owner}:${BRANCH_NAME}" --json number --jq '.[0].number // empty' || true)"

          if [ -n "$existing_pr_number" ]; then
            echo "PR #$existing_pr_number already exists - updating."
            if ! gh pr comment "$existing_pr_number" --body "Automated update pushed: \`${GITHUB_SHA}\`"; then
              echo "::warning title=PR Comment Failed::Could not add comment to PR #$existing_pr_number"
            fi
            # Add labels (ignore if already present)
            gh pr edit "$existing_pr_number" --add-label "documentation" --add-label "automated" || true
            echo "pr_number=$existing_pr_number" >> "$GITHUB_OUTPUT"
          else
            echo "Creating new PR..."
            printf '%s\n' "$PR_BODY" > pr_body.md

            # Create PR; if it fails we abort (real failure).
            if ! gh pr create \
                --base main \
                --head "$BRANCH_NAME" \
                --title "$PR_TITLE" \
                --body-file pr_body.md \
                --label "documentation" \
                --label "automated"; then
              echo "::error title=PR Creation Failed::gh pr create command failed"
              exit 1
            fi

            # Capture PR number robustly (retry to avoid race)
            new_pr="$(retry 3 gh pr list --state open --head "${owner}:${BRANCH_NAME}" --json number --jq '.[0].number // empty' || true)"

            if [ -z "$new_pr" ]; then
              echo "::warning title=PR Number Not Retrieved::PR created but number lookup failed; continuing."
            else
              echo "pr_number=$new_pr" >> "$GITHUB_OUTPUT"
            fi
          fi

          # Always succeed if we reached here (avoid job failing after successful PR creation due to lookup hiccups)
          exit 0

      - name: Log result
        run: |
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            pr_num="${{ steps.pr.outputs.pr_number }}"
            if [ -n "$pr_num" ]; then
              echo "✓ Pull request #$pr_num created or updated for TOC update"
            else
              echo "✓ Pull request created or updated for TOC update (number not captured)"
            fi
          else
            echo "✓ No changes needed - Table Of Contents is up to date"
