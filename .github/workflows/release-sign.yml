name: Sign Release Artifacts
"on":
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag'
        required: false
        default: 'main'
        
permissions:
  contents: write
  id-token: write   # Required for keyless cosign
  actions: read

env:
  COSIGN_EXPERIMENTAL: "1"
  REPO: ${{ github.repository }}
  RELEASE_TAG: ${{ github.event.inputs.release_tag || 'main' }}
  # Identity issuer for GitHub Actions OIDC
  COSIGN_OIDC_ISSUER: "https://token.actions.githubusercontent.com"
  # Broad (but repo‑scoped) identity regex; tighten if desired.
  COSIGN_IDENTITY_REGEX: "https://github.com/${{ github.repository }}/.github/workflows/.*"

jobs:
  wait-for-bundle:
    runs-on: ubuntu-latest
    outputs:
      bundle-ready: ${{ steps.wait.outputs.bundle-ready }}
    steps:
      - name: Wait briefly for bundle producing workflow (if separate)
        id: wait
        run: |
          echo "Checking if bundle artifacts are available..."
          # Replace with logic to poll another workflow’s artifacts if needed.
          sleep 30
          echo "bundle-ready=true" >> "$GITHUB_OUTPUT"

  sign-release:
    needs: wait-for-bundle
    if: needs.wait-for-bundle.outputs.bundle-ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
            fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.3

      - name: Create placeholder release if not exists (optional)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
            if ! gh release view "$RELEASE_TAG" --repo "$REPO" &>/dev/null; then
              echo "Creating placeholder release $RELEASE_TAG"
              gh release create "$RELEASE_TAG" --repo "$REPO" --title "Release $RELEASE_TAG" --notes "Auto-created for signing"
            fi

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p signed_artifacts
          echo "Downloading assets for release: $RELEASE_TAG"

          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Download attempt $attempt of $max_attempts"
            if gh release download "$RELEASE_TAG" --repo "$REPO" --dir signed_artifacts; then
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo "Error: Failed to download release assets after $max_attempts attempts"
              exit 1
            else
              echo "Download failed, waiting 30 seconds before retry..."
              sleep 30
              ((attempt++))
            fi
          done

          # Remove any prior signature artifacts to avoid re-upload collision
            find signed_artifacts -name "*.sigstore" -delete || true
            find signed_artifacts -name "*.sig" -delete || true

          if [ -z "$(ls -A signed_artifacts)" ]; then
            echo "Error: No assets found to sign"
            exit 1
          fi

          echo "Found assets to sign:"
          ls -la signed_artifacts

      - name: Sign artifacts (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          set -euo pipefail
          cd signed_artifacts
          mkdir -p signatures

          for file in *; do
            [ -f "$file" ] || continue
            [[ "$file" == *.sigstore ]] && continue
            [[ "$file" == *.sig ]] && continue
            [[ "$file" == signatures ]] && continue
            echo "Signing $file ..."
            # Bundle (includes cert + inclusion proof)
            cosign sign-blob --yes --bundle "signatures/$file.sigstore" "$file"
            # Detached classic signature (optional)
            cosign sign-blob --yes --output-signature "signatures/$file.sig" "$file"
            echo "✓ Signed $file"
          done

          echo "Generated signatures:"
          ls -la signatures

      - name: Verify signatures (keyless with identity constraints)
        env:
          COSIGN_OIDC_ISSUER: ${{ env.COSIGN_OIDC_ISSUER }}
          COSIGN_IDENTITY_REGEX: ${{ env.COSIGN_IDENTITY_REGEX }}
        run: |
          set -euo pipefail
          cd signed_artifacts
          echo "Verifying signatures using:"
          echo "  Issuer:    $COSIGN_OIDC_ISSUER"
          echo "  Identity Regex: $COSIGN_IDENTITY_REGEX"

          verification_failed=false

          for file in *; do
            [ -f "$file" ] || continue
            [[ "$file" == *.sigstore ]] && continue
            [[ "$file" == *.sig ]] && continue
            [[ "$file" == signatures ]] && continue

            bundle="signatures/$file.sigstore"
            if [ ! -f "$bundle" ]; then
              echo "✗ No signature bundle for $file"
              verification_failed=true
              continue
            fi

            echo "Verifying $file ..."
            if cosign verify-blob \
                --bundle "$bundle" \
                --certificate-oidc-issuer "$COSIGN_OIDC_ISSUER" \
                --certificate-identity-regexp "$COSIGN_IDENTITY_REGEX" \
                "$file"; then
              echo "✓ Verification successful for $file"
            else
              echo "✗ Verification FAILED for $file"
              verification_failed=true
            fi
          done

          if [ "$verification_failed" = true ]; then
            echo "Error: Signature verification failed for one or more files"
            exit 1
          fi

          echo "All signatures verified successfully!"

      - name: Upload signatures to release
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Uploading signatures (.sig and .sigstore) to release $RELEASE_TAG"
          gh release upload "$RELEASE_TAG" signed_artifacts/signatures/* --repo "$REPO" --clobber
          echo "Upload complete."

      - name: Summary
        if: ${{ success() }}
        run: |
          echo "Signing & verification completed successfully for release: $RELEASE_TAG"
