name: pre-commit

on:
  push:
    paths-ignore:
      - '**/*.md'
      - '**/*.ipynb'
  pull_request:
  workflow_dispatch:

# Write needed so the workflow can optionally auto-commit formatting fixes
permissions:
  contents: write

# Avoid races creating multiple auto-fix commits simultaneously
concurrency:
  group: pre-commit-${{ github.ref }}
  cancel-in-progress: false

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Validate pre-commit config (fast fail)
        run: |
          python -m pip install --quiet pre-commit
          pre-commit validate-config

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install pre-commit hooks
        run: pre-commit install-hooks

      - name: Phase 1 (auto-fix formatting & hygiene)
        id: phase1
        continue-on-error: true
        env:
          # Skip only non-fix or expensive hooks here
          SKIP: ruff-lint,mypy-report,check-large-files
        run: |
          echo "Running Phase 1 (auto-fix eligible hooks)..."
          pre-commit run --all-files --show-diff-on-failure || true

      - name: Auto-commit fixes if needed
        id: auto_commit
        # Skip auto-commit for forked PRs (cannot push) but run for push / workflow_dispatch / same-repo PR
        if: >
          (steps.phase1.outcome == 'success' || steps.phase1.outcome == 'failure') &&
          (github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork)
        run: |
          set -euo pipefail
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"

          # Show status for debugging
          git status --short || true

          if git diff --quiet; then
            echo "No changes to commit."
            echo "changes_committed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected - committing."
            git add .
            git commit -m "chore: pre-commit auto-fix [skip ci]"
            git push origin "${BRANCH}"
            echo "changes_committed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Phase 2 (enforcement: deterministic, no auto-fix)
        id: phase2
        if: steps.auto_commit.outputs.changes_committed != 'true'
        run: |
          echo "Running Phase 2 (enforcement)..."
          # Do not rerun formatters that already changed files; enforce remaining checks
          SKIP=ruff-format pre-commit run --all-files --show-diff-on-failure

      - name: Mypy (advisory, non-blocking)
        id: mypy_report
        continue-on-error: true
        run: |
          echo "Standalone mypy advisory run"
          mypy || true

      - name: Summary
        if: always()
        run: |
          echo "## Pre-commit CI Summary" >> "$GITHUB_STEP_SUMMARY"

          if [ "${{ steps.auto_commit.outputs.changes_committed }}" = "true" ]; then
            echo "- 🔧 Auto-fixes were committed to the branch" >> "$GITHUB_STEP_SUMMARY"
          elif [ "${{ steps.phase2.outcome }}" = "success" ]; then
            echo "- ✅ Enforcement phase passed" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- ❌ Enforcement phase failed" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "- ℹ️ Mypy advisory result: ${{ steps.mypy_report.outcome }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Local Usage" >> "$GITHUB_STEP_SUMMARY"
          echo "1. Run: pre-commit run --all-files" >> "$GITHUB_STEP_SUMMARY"
          echo "2. If formatting issues appear: ruff format . && ruff check --fix ." >> "$GITHUB_STEP_SUMMARY"
          echo "3. Optional type check: mypy" >> "$GITHUB_STEP_SUMMARY"

      - name: Fail if enforcement failed
        if: |
          steps.auto_commit.outputs.changes_committed != 'true' &&
          steps.phase2.outcome == 'failure'
        run: exit 1