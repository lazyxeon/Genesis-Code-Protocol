# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# EthicalCheck addresses the critical need to continuously security test APIs in development and in production.

# EthicalCheck provides the industry’s only free & automated API security testing service that uncovers security vulnerabilities using OWASP API list.
# Developers relies on EthicalCheck to evaluate every update and release, ensuring that no APIs go to production with exploitable vulnerabilities.

# You develop the application and API, we bring complete and continuous security testing to you, accelerating development.

# Know your API and Applications are secure with EthicalCheck – our free & automated API security testing service.

# How EthicalCheck works?
# EthicalCheck functions in the following simple steps.
# 1. Security Testing.
# Provide your OpenAPI specification or start with a public Postman collection URL.
# EthicalCheck instantly instrospects your API and creates a map of API endpoints for security testing.
# It then automatically creates hundreds of security tests that are non-intrusive to comprehensively and completely test for authentication, authorizations, and OWASP bugs your API. The tests addresses the OWASP API Security categories including OAuth 2.0, JWT, Rate Limit etc.

# 2. Reporting.
# EthicalCheck generates security test report that includes all the tested endpoints, coverage graph, exceptions, and vulnerabilities.
# Vulnerabilities are fully triaged, it contains CVSS score, severity, endpoint information, and OWASP tagging.


# This is a starter workflow to help you get started with EthicalCheck Actions

name: EthicalCheck-Workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # Customize trigger events based on your DevSecOps processes.
  push:
  pull_request:
  schedule:
    - cron: '33 16 * * 5'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      oas_url:
        description: 'OpenAPI specification URL'
        required: false
      email:
        description: 'Report email address'
        required: false

permissions:
  contents: read
  security-events: write

env:
  ETHICALCHECK_OAS_URL: ${{ vars.ETHICALCHECK_OAS_URL || '' }}
  ETHICALCHECK_EMAIL: ${{ vars.ETHICALCHECK_EMAIL || '' }}

jobs:
  Validate_Configuration:
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.config-valid }}
      skip-reason: ${{ steps.validate.outputs.skip-reason }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Validate EthicalCheck Configuration
        id: validate
        run: |
          python -c "
          import sys
          import os
          sys.path.append('.')
          from src.ethicalcheck import validate_configuration
          
          result = validate_configuration()
          print(f'Configuration validation result: {result}')
          
          if result['status'] == 'configured':
              print('config-valid=true' >> '$GITHUB_OUTPUT')
              print('✅ EthicalCheck configuration is valid' >> '$GITHUB_STEP_SUMMARY')
          elif result['status'] == 'skipped':
              print('config-valid=false' >> '$GITHUB_OUTPUT')
              print(f'skip-reason={result.get(\"reason\", \"unknown\")}' >> '$GITHUB_OUTPUT')
              print('⏭️ EthicalCheck scan skipped: Missing configuration variables' >> '$GITHUB_STEP_SUMMARY')
          else:
              print('config-valid=false' >> '$GITHUB_OUTPUT')
              print(f'skip-reason={result.get(\"reason\", \"unknown\")}' >> '$GITHUB_OUTPUT')
              print(f'❌ EthicalCheck configuration error: {result.get(\"reason\", \"unknown\")}' >> '$GITHUB_STEP_SUMMARY')
              exit 1
          "

  Trigger_EthicalCheck:
    needs: Validate_Configuration
    if: needs.Validate_Configuration.outputs.config-valid == 'true'
    continue-on-error: true
    permissions:
      contents: read
      security-events: write
      actions: read # required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
       - name: Checkout code
         uses: actions/checkout@v4
       
       - name: EthicalCheck Free & Automated API Security Testing Service
         id: ethicalcheck
         uses: Octota-GitHub/ethicalcheck-action@3ec5e93b42e591349e46635da9f909bac66c23a9
         timeout-minutes: 25
         continue-on-error: true
         with:
          # The OpenAPI Specification URL or Swagger Path or Public Postman collection URL.
          oas-url: ${{ env.ETHICALCHECK_OAS_URL }}
          # The email address to which the penetration test report will be sent.
          email: ${{ env.ETHICALCHECK_EMAIL }}
          sarif-result-file: ethicalcheck-results.sarif

       - name: Check scan results
         run: |
           if [ -f "ethicalcheck-results.sarif" ]; then
             echo "✅ EthicalCheck scan completed successfully" >> "$GITHUB_STEP_SUMMARY"
             echo "📊 SARIF results file generated: ethicalcheck-results.sarif" >> "$GITHUB_STEP_SUMMARY"
           else
             echo "⚠️ EthicalCheck scan completed but no SARIF file generated" >> "$GITHUB_STEP_SUMMARY"
           fi

       - name: Upload sarif file to repository
         if: hashFiles('ethicalcheck-results.sarif') != ''
         uses: github/codeql-action/upload-sarif@v3
         continue-on-error: true
         with:
          sarif_file: ./ethicalcheck-results.sarif

  Skip_Notification:
    needs: Validate_Configuration
    if: needs.Validate_Configuration.outputs.config-valid != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Report skip reason
        run: |
          REASON="${{ needs.Validate_Configuration.outputs.skip-reason }}"
          case "$REASON" in
            "missing_configuration")
              echo "ℹ️ EthicalCheck scan skipped: Required environment variables ETHICALCHECK_OAS_URL and/or ETHICALCHECK_EMAIL are not configured" >> "$GITHUB_STEP_SUMMARY"
              echo "To enable EthicalCheck scanning, configure these variables in your repository settings" >> "$GITHUB_STEP_SUMMARY"
              ;;
            "invalid_url")
              echo "❌ EthicalCheck scan failed: Invalid OpenAPI specification URL format" >> "$GITHUB_STEP_SUMMARY"
              echo "Please ensure ETHICALCHECK_OAS_URL is a valid HTTP/HTTPS URL" >> "$GITHUB_STEP_SUMMARY"
              ;;
            "invalid_email")
              echo "❌ EthicalCheck scan failed: Invalid email address format" >> "$GITHUB_STEP_SUMMARY"
              echo "Please ensure ETHICALCHECK_EMAIL is a valid email address" >> "$GITHUB_STEP_SUMMARY"
              ;;
            *)
              echo "❌ EthicalCheck scan failed: Unknown configuration error" >> "$GITHUB_STEP_SUMMARY"
              ;;
          esac
