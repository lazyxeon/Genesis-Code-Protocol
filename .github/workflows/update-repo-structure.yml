name: Update Repo Structure

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-tree:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build repo tree and update README (inline)
        run: |
          python - <<'PY'
          import os, re
          from pathlib import Path

          ROOT = Path(".").resolve()
          README = ROOT / "README.md"

          EXCLUDE_DIRS = {
              ".git", ".github", "__pycache__", ".mypy_cache", ".pytest_cache",
              ".venv", "venv", "node_modules", "dist", "build", ".idea", ".vscode"
          }
          EXCLUDE_FILES = {".DS_Store"}

          MAX_DEPTH = 2
          MAX_ENTRIES = 200

          BEGIN = "<!-- BEGIN REPO TREE -->"
          END = "<!-- END REPO TREE -->"

          def build_tree(root: Path, prefix: str = "", depth: int = 0) -> str:
              if depth > MAX_DEPTH:
                  return ""
              try:
                  names = sorted(os.listdir(root))[:MAX_ENTRIES]
              except PermissionError:
                  return ""
              lines = []
              for name in names:
                  if name in EXCLUDE_FILES:
                      continue
                  p = root / name
                  if p.is_dir():
                      if name in EXCLUDE_DIRS:
                          continue
                      lines.append(f"{prefix}{name}/")
                      subtree = build_tree(p, prefix + "├─ ", depth + 1)
                      if subtree:
                          lines.append(subtree)
                  else:
                      lines.append(f"{prefix}{name}")
              return "\n".join(l for l in lines if l)

          # Ensure README exists and has markers
          if not README.exists():
              README.write_text("# Repo\n\n<!-- BEGIN REPO TREE -->\n```\n(empty)\n```\n<!-- END REPO TREE -->\n", encoding="utf-8")

          content = README.read_text(encoding="utf-8")
          if BEGIN not in content or END not in content:
              # insert markers near the bottom if missing
              content += f"\n\n## Repository Structure (auto-generated)\n\n{BEGIN}\n```\n(empty)\n```\n{END}\n"
              README.write_text(content, encoding="utf-8")
              content = README.read_text(encoding="utf-8")

          tree = build_tree(ROOT) or "(empty)"

          def replace_between(text: str, start: str, end: str, new_block: str) -> str:
              pat = re.compile(rf"({re.escape(start)})(.*?){re.escape(end)}", re.DOTALL)
              repl = f"{start}\n```\n{new_block}\n```\n{end}"
              return pat.sub(repl, text, count=1)

          updated = replace_between(content, BEGIN, END, tree)
          if updated != content:
              README.write_text(updated, encoding="utf-8")
              print("README.md updated with repository tree.")
          else:
              print("No changes needed.")
          PY

      - name: Create PR with changes
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/update-repo-structure
          title: "chore(docs): sync Repository Structure in README"
          commit-message: "chore(docs): auto-sync repo structure in README"
          body: |
            This PR updates the auto-generated **Repository Structure** section in `README.md`.
            Content between the markers is created inline by the workflow.
          labels: documentation
          signoff: true
