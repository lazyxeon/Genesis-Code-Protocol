name: Update Repo Structure

permissions: read-all
jobs:
  update:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
    
on:
  push:
    branches: [ "main" ]
    # prevent infinite loop when our own PR touches README
    paths-ignore:
      - "README.md"
      - ".github/workflows/update-repo-structure.yml"
  workflow_dispatch: {}        # manual "Run workflow" button
  schedule:
    - cron: "17 2 * * *"       # optional: daily at 02:17 UTC

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: repo-structure
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build repo tree and patch README (inline)
        id: patch
        run: |
          python - <<'PY'
          import os, re, sys
          from pathlib import Path

          ROOT = Path(".").resolve()
          README = ROOT / "README.md"
          BEGIN = "<!-- BEGIN REPO TREE -->"
          END = "<!-- END REPO TREE -->"

          EXCLUDE_DIRS = {
              ".git", ".github", "__pycache__", ".mypy_cache", ".pytest_cache",
              ".venv", "venv", "node_modules", "dist", "build", ".idea", ".vscode"
          }
          EXCLUDE_FILES = {".DS_Store"}
          MAX_DEPTH = 2
          MAX_ITEMS_PER_DIR = 50

          def list_dir(path):
              try:
                  names = sorted(os.listdir(path))
              except Exception:
                  return [], []
              dirs, files = [], []
              for n in names:
                  if n in EXCLUDE_FILES:
                      continue
                  p = path / n
                  if p.is_dir():
                      if n not in EXCLUDE_DIRS:
                          dirs.append(p)
                  else:
                      files.append(p)
              return dirs, files

          def esc(s): return s.replace("_","\\_")

          def build(path, depth=0):
              if depth > MAX_DEPTH: return []
              dirs, files = list_dir(path)
              entries = [("dir",d) for d in dirs] + [("file",f) for f in files]
              lines = []
              for kind,p in entries[:MAX_ITEMS_PER_DIR]:
                  indent = "  "*depth
                  if kind=="dir":
                      lines.append(f"{indent}- **{esc(p.name)}/**")
                      lines.extend(build(p, depth+1))
                  else:
                      lines.append(f"{indent}- {esc(p.name)}")
              if len(entries) > MAX_ITEMS_PER_DIR:
                  lines.append(f"{'  '*depth}- … _{len(entries)-MAX_ITEMS_PER_DIR} more item(s) hidden_")
              return lines

          if not README.exists():
              print("::error::README.md not found at repo root")
              sys.exit(1)

          content = README.read_text(encoding="utf-8")
          has_markers = (BEGIN in content) and (END in content)
          if not has_markers:
              content += f"\n\n## Repository Structure\n\n{BEGIN}\n```text\n(pending)\n```\n{END}\n"

          # top-level items
          dirs, files = list_dir(ROOT)
          entries = [("dir",d) for d in dirs] + [("file",f) for f in files]
          lines=[]
          for kind,p in entries[:MAX_ITEMS_PER_DIR]:
              if kind=='dir':
                  lines.append(f"- **{esc(p.name)}/**")
                  lines.extend(build(p,1))
              else:
                  lines.append(f"- {esc(p.name)}")
          if len(entries) > MAX_ITEMS_PER_DIR:
              lines.append(f"- … _{len(entries)-MAX_ITEMS_PER_DIR} more item(s) hidden_")

          block = "\n".join(lines) or "(empty)"
          new_section = f"{BEGIN}\n```text\n{block}\n```\n{END}"

          pattern = re.compile(rf"({re.escape(BEGIN)})(.*?){re.escape(END)}", re.DOTALL)
          updated = pattern.sub(new_section, content, count=1)
          changed = (updated != content)

          README.write_text(updated, encoding="utf-8")
          print(f"Markers_present={has_markers}")
          print(f"Top_level_entries={len(entries)}")
          print(f"Changed={changed}")
          PY
  # ... existing Python code to patch README ...
      - name: Create PR with changes
        uses: peter-evans/create-pull-request@<commit-sha>
        with:
          branch: chore/update-repo-structure
          title: "chore(docs): sync Repository Structure in README"
          commit-message: "docs(readme): auto-sync repo structure"
          labels: documentation
          signoff: true
