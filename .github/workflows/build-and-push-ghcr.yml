name: Build and Push Docker image to GHCR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Global least privilege; escalate only what's needed (packages write).
permissions:
  contents: read
  packages: write

concurrency:
  group: build-ghcr-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive lowercase image name
        id: imagename
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%%/*}"
            # repo part after slash
          REPO="${GITHUB_REPOSITORY#*/}"
          # Force lowercase (POSIX tr to avoid bash-specific ${var,,})
          OWNER_LC="$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')"
          REPO_LC="$(echo "$REPO" | tr '[:upper:]' '[:lower:]')"
          IMAGE_NAME="ghcr.io/${OWNER_LC}/${REPO_LC}"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "owner=$OWNER_LC" >> "$GITHUB_OUTPUT"
          echo "repo=$REPO_LC" >> "$GITHUB_OUTPUT"
          echo "Computed IMAGE_NAME=$IMAGE_NAME"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to GHCR (GITHUB_TOKEN)
        id: login
        uses: docker/login-action@v3
        continue-on-error: true
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback login with GHCR_PAT
        if: steps.login.outcome != 'success'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & push multi-arch (registry)
        id: build-multi
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max

      # Local single-arch image for immediate SBOM generation (avoid registry race, ensures lowercase tag)
      - name: Build local amd64 image (no push)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE_NAME }}:sbom-temp

      - name: Generate SBOM from local image
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}:sbom-temp
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Record image digest
        if: github.event_name != 'pull_request'
        run: echo "Image digest: ${{ steps.build-multi.outputs.digest }}" | tee image-digest.txt

      - name: Upload digest artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: image-digest
          path: image-digest.txt
