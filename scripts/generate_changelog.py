#!/usr/bin/env python3

"""
Generate a simple changelog from the project's git history.

This script groups commit messages by prefix (feat, fix, doc, refactor, perf,
style, test, chore/ci, security) and writes a ``CHANGELOG.md`` file at the
repository root.  Each group becomes its own section.  Unmatched commits are
placed in a "Miscellaneous Tasks" section.

Run this script from the repository root:

    python scripts/generate_changelog.py
"""

import re
from pathlib import Path
from typing import Dict, List

from git import Repo

# Resolve the repository root and CHANGELOG file location.
ROOT = Path(__file__).resolve().parents[1]
CHANGELOG = ROOT / "CHANGELOG.md"

# Define the groups and the patterns that map commit message prefixes to them.
GROUPS: Dict[str, List[str]] = {
    "Features": [],
    "Bug Fixes": [],
    "Documentation": [],
    "Refactor": [],
    "Performance": [],
    "Style": [],
    "Testing": [],
    "Miscellaneous Tasks": [],
    "Security": [],
}

PATTERNS = [
    (r"^feat", "Features"),
    (r"^fix", "Bug Fixes"),
    (r"^doc", "Documentation"),
    (r"^refactor", "Refactor"),
    (r"^perf", "Performance"),
    (r"^style", "Style"),
    (r"^test", "Testing"),
    (r"^(chore|ci)", "Miscellaneous Tasks"),
    (r".*security", "Security"),
]


def main() -> None:
    """Extract commit messages and write a grouped changelog."""
    try:
        repo = Repo(ROOT)
    except Exception as e:  # pragma: no cover - repository must exist
        raise SystemExit(f"Failed to open git repository: {e}") from e

    messages = [c.message.strip().splitlines()[0] for c in repo.iter_commits()]

    for msg in messages:
        assigned = False
        for pattern, group in PATTERNS:
            if re.search(pattern, msg, re.IGNORECASE):
                GROUPS[group].append(msg)
                assigned = True
                break
        if not assigned:
            GROUPS["Miscellaneous Tasks"].append(msg)

    lines = ["# GRCP Changelog", ""]
    for group, commits in GROUPS.items():
        if commits:
            lines.append(f"### {group}")
            for c in commits:
                lines.append(f"- {c}")
            lines.append("")
    lines.append("Generated by generate_changelog.py")
    CHANGELOG.write_text("\n".join(lines).strip() + "\n", encoding="utf-8")
    print(f"Wrote {CHANGELOG.relative_to(ROOT)}")


if __name__ == "__main__":
    main()
