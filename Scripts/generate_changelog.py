#!/usr/bin/env python3

"""
Generate a simple changelog from the project's git history.

This script groups commit messages by prefix (feat, fix, doc, refactor, perf, style,
test, chore/ci) and writes a ``CHANGELOG.md`` file at the repository root.
It includes a top-level heading and lists commits under section headings.
Unmatched commits are placed in a "Miscellaneous Tasks" section.

Run this script from the repository root:

    python Scripts/generate_changelog.py
"""

import re
import subprocess
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
CHANGELOG = ROOT / "CHANGELOG.md"

GROUPS = {
    "Features": [],
    "Bug Fixes": [],
    "Documentation": [],
    "Refactor": [],
    "Performance": [],
    "Style": [],
    "Testing": [],
    "Miscellaneous Tasks": [],
    "Security": [],
}

PATTERNS = [
    (r'^feat', 'Features'),
    (r'^fix', 'Bug Fixes'),
    (r'^doc', 'Documentation'),
    (r'^refactor', 'Refactor'),
    (r'^perf', 'Performance'),
    (r'^style', 'Style'),
    (r'^test', 'Testing'),
    (r'^(chore|ci)', 'Miscellaneous Tasks'),
    (r'.*security', 'Security'),
]

def main() -> None:
    try:
        result = subprocess.run(
            ["git", "log", "--pretty=format:%s"],
            cwd=ROOT,
            capture_output=True,
            text=True,
            check=True,
        )
    except subprocess.CalledProcessError as e:
        raise SystemExit(f"Failed to retrieve git log: {e}") from e

    messages = [m.strip() for m in result.stdout.splitlines() if m.strip()]

    for msg in messages:
        assigned = False
        for pattern, group in PATTERNS:
            if re.search(pattern, msg, re.IGNORECASE):
                GROUPS[group].append(msg)
                assigned = True
                break
        if not assigned:
            GROUPS["Miscellaneous Tasks"].append(msg)

    lines = ["# GRCP Changelog", ""]
    for group, commits in GROUPS.items():
        if commits:
            lines.append(f"### {group}")
            for c in commits:
                lines.append(f"- {c}")
            lines.append("")
    lines.append("Generated by generate_changelog.py")
    CHANGELOG.write_text("\n".join(lines).strip() + "\n", encoding="utf-8")
    print(f"Wrote {CHANGELOG.relative_to(ROOT)}")

if __name__ == "__main__":
    main()
