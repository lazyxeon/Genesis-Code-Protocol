traces:
  service_name: gha-workflow-resilience
  spans:
    resilience.dependency_review: {parent: root, children: [resilience.generate_changelog]}
    resilience.generate_changelog: {parent: resilience.dependency_review, children: [resilience.update_toc]}
    resilience.update_toc: {parent: resilience.generate_changelog, children: [resilience.update_repo_structure]}
    resilience.update_repo_structure: {parent: resilience.update_toc, children: [resilience.markdownlint]}
    resilience.markdownlint: {parent: resilience.update_repo_structure, children: [resilience.release_bundle]}
    resilience.release_bundle: {parent: resilience.markdownlint, children: [resilience.sign_release]}
    resilience.sign_release: {parent: resilience.release_bundle}
metrics:
  counters:
    dependency_review_runs:
      unit: runs
      cardinality: low
    changelog_runs:
      unit: runs
      cardinality: low
    toc_runs:
      unit: runs
      cardinality: low
    repo_structure_runs:
      unit: runs
      cardinality: low
    markdownlint_runs:
      unit: runs
      cardinality: low
    bundle_runs:
      unit: runs
      cardinality: low
    sign_release_runs:
      unit: runs
      cardinality: low
  timers:
    duration_ms:
      unit: ms
      cardinality: low
logs:
  format: json
  pii_scrub: true
  sample_rate: 1.0
code_snippets:
  python: |
    from opentelemetry import trace
    tracer = trace.get_tracer("gha-workflow-resilience")
    with tracer.start_as_current_span("resilience.dependency_review"):
        ...
  node: |
    const { trace } = require("@opentelemetry/api");
    const tracer = trace.getTracer("gha-workflow-resilience");
    tracer.startActiveSpan("resilience.dependency_review", span => {
      // ...
      span.end();
    });
